package pro.sky.telegrambot.scheduler;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.request.SendMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import pro.sky.telegrambot.model.NotificationTask;
import pro.sky.telegrambot.repository.NotificationTaskRepository;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Component
public class NotificationScheduler {
    private static final Logger logger = LoggerFactory.getLogger(NotificationScheduler.class);

    private final NotificationTaskRepository repository;
    private final TelegramBot telegramBot;

    public NotificationScheduler(
            NotificationTaskRepository repository,
            TelegramBot telegramBot
    ) {
        this.repository = repository;
        this.telegramBot = telegramBot;
    }

    @Scheduled(cron = "0 * * * * *") // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ 0 —Å–µ–∫—É–Ω–¥
    public void checkNotifications() {
        try {
            LocalDateTime now = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {}", now);

            List<NotificationTask> tasks = repository.findByNotificationDateTime(now);
            logger.info("–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {}", tasks.size());

            for (NotificationTask task : tasks) {
                try {
                    telegramBot.execute(new SendMessage(
                            task.getChatId(),
                            "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n" + task.getMessage()
                    ).parseMode(com.pengrad.telegrambot.model.request.ParseMode.HTML));

                    repository.delete(task);
                    logger.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è chatId: {}", task.getChatId());
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è chatId: {}", task.getChatId(), e);

                    // –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    task.setNotificationDateTime(now.plusMinutes(1));
                    repository.save(task);
                    logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É –¥–ª—è chatId: {}", task.getChatId());
                }
            }
        } catch (Exception e) {
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–µ–¥—É–ª–µ—Ä–µ", e);
        }
    }
}
